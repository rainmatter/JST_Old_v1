-- MySQL Script generated by MySQL Workbench
-- 08/05/15 23:42:08
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema CareerSiteDB
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `CareerSiteDB` ;

-- -----------------------------------------------------
-- Schema CareerSiteDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `CareerSiteDB` DEFAULT CHARACTER SET utf8 ;
USE CareerSiteDB;
#USE stewak5 ;

#USE db588088359;

-- -----------------------------------------------------
-- Table `CareerSiteDB`.`address`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `address` ;

CREATE TABLE IF NOT EXISTS `address` (
  `AddressID` INT(11) NOT NULL COMMENT 'automatically generated',
  `AddressStreet` VARCHAR(45) NOT NULL,
  `AddressCity` VARCHAR(25) NOT NULL,
  `AddressState` VARCHAR(20) NOT NULL,
  `AddressZip` CHAR(5) NOT NULL,
  PRIMARY KEY (`AddressID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `CareerSiteDB`.`location`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `location` ;

CREATE TABLE IF NOT EXISTS `location` (
  `LocationID` INT(11) NOT NULL COMMENT 'Automatically generated',
  `AddressID` INT(11) NOT NULL,
  PRIMARY KEY (`LocationID`),
  INDEX `fk_Location_Address1_idx` (`AddressID` ASC),
  CONSTRAINT `fk_Location_Address1`
    FOREIGN KEY (`AddressID`)
    REFERENCES `address` (`AddressID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `CareerSiteDB`.`department`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `department` ;

CREATE TABLE IF NOT EXISTS `department` (
  `DepartmentID` INT(11) NOT NULL COMMENT 'Automatically generated',
  `DepartmentName` VARCHAR(25) NOT NULL,
  `LocationID` INT(11) NOT NULL,
  PRIMARY KEY (`DepartmentID`),
  INDEX `fk_Department_Location1_idx` (`LocationID` ASC),
  CONSTRAINT `fk_Department_Location1`
    FOREIGN KEY (`LocationID`)
    REFERENCES `location` (`LocationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `CareerSiteDB`.`employeeposition`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `employeeposition` ;

CREATE TABLE IF NOT EXISTS `employeeposition` (
  `EmployeePositionID` INT(11) NOT NULL,
  `EmployeePositionName` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`EmployeePositionID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `CareerSiteDB`.`employee`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `employee` ;

CREATE TABLE IF NOT EXISTS `employee` (
  `EmployeeID` INT(11) NOT NULL,
  `EmployeeFirstName` VARCHAR(25) NOT NULL,
  `EmployeeMiddleName` VARCHAR(25) NOT NULL,
  `EmployeeLastName` VARCHAR(25) NOT NULL,
  `EmployeeSSN` CHAR(9) NOT NULL,
  `AddressID` INT(11) NOT NULL,
  `EmployeePositionID` INT(11) NOT NULL,
  `DepartmentID` INT(11) NOT NULL,
  PRIMARY KEY (`EmployeeID`),
  INDEX `fk_Employee_Address1_idx` (`AddressID` ASC),
  INDEX `fk_Employee_EmployeePosition1_idx` (`EmployeePositionID` ASC),
  INDEX `fk_employee_department1_idx` (`DepartmentID` ASC),
  CONSTRAINT `fk_Employee_Address1`
    FOREIGN KEY (`AddressID`)
    REFERENCES `address` (`AddressID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Employee_EmployeePosition1`
    FOREIGN KEY (`EmployeePositionID`)
    REFERENCES `employeeposition` (`EmployeePositionID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_employee_department1`
    FOREIGN KEY (`DepartmentID`)
    REFERENCES `department` (`DepartmentID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;



-- -----------------------------------------------------
-- Table `CareerSiteDB`.`applicant`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `applicant` ;

CREATE TABLE IF NOT EXISTS `applicant` (
  `ApplicantID` INT(11) NOT NULL,
  `ApplicantFirstName` VARCHAR(25) NOT NULL,
  `ApplicantMiddleName` VARCHAR(25) NOT NULL,
  `ApplicantLastName` VARCHAR(25) NOT NULL,
  `ApplicantSSN` CHAR(9) NOT NULL,
  `ApplicantPhoneNo` CHAR(10) NOT NULL,
  `ApplicantBirthDate` DATE NOT NULL,
  `AddressID` INT(11) NOT NULL,
  PRIMARY KEY (`ApplicantID`),
  INDEX `fk_Applicant_Address1_idx` (`AddressID` ASC),
  CONSTRAINT `fk_Applicant_Address1`
    FOREIGN KEY (`AddressID`)
    REFERENCES `address` (`AddressID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `CareerSiteDB`.`account`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `account` ;

CREATE TABLE IF NOT EXISTS `account` (
  `AccountEmail` VARCHAR(45) NOT NULL,
  `AccountPassword` VARCHAR(15) NOT NULL,
  `ApplicantID` INT(11) NULL DEFAULT NULL,
  `EmployeeID` INT(11) NULL DEFAULT NULL,
  `AccountSetupDate` DATE NOT NULL,
  PRIMARY KEY (`AccountEmail`),
  INDEX `fk_Account_Applicant1_idx` (`ApplicantID` ASC),
  INDEX `fk_Account_Employee1_idx` (`EmployeeID` ASC),
  CONSTRAINT `fk_Account_Applicant1`
    FOREIGN KEY (`ApplicantID`)
    REFERENCES `applicant` (`ApplicantID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Account_Employee1`
    FOREIGN KEY (`EmployeeID`)
    REFERENCES `employee` (`EmployeeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `CareerSiteDB`.`joblisting`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `joblisting` ;

CREATE TABLE IF NOT EXISTS `joblisting` (
  `JobListingId` INT(11) NOT NULL,
  `JobListingPostDate` DATE NOT NULL,
  `JobListingExpDate` DATE NULL DEFAULT NULL,
  `JobListingPostTime` TIME NOT NULL,
  `JobListingTitle` VARCHAR(45) NOT NULL,
  `JobListingDesc` VARCHAR(500) NOT NULL,
  `JobListingReqExp` VARCHAR(2000) NOT NULL,
  `JobListingDuties` VARCHAR(2000) NOT NULL,
  `JobListingType` VARCHAR(25) NULL DEFAULT NULL COMMENT 'Full-time, part-time, contract',
  `DepartmentID` INT(11) NOT NULL,
  `EmployeeID` INT(11) NOT NULL COMMENT 'ID of the employee that posted.',
  PRIMARY KEY (`JobListingId`),
  INDEX `fk_JobListing_Department_idx` (`DepartmentID` ASC),
  INDEX `fk_joblisting_employee1_idx` (`EmployeeID` ASC),
  CONSTRAINT `fk_JobListing_Department`
    FOREIGN KEY (`DepartmentID`)
    REFERENCES `department` (`DepartmentID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_joblisting_employee1`
    FOREIGN KEY (`EmployeeID`)
    REFERENCES `employee` (`EmployeeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `CareerSiteDB`.`resume`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `resume` ;

CREATE TABLE IF NOT EXISTS `resume` (
  `ResumeID` INT(11) NOT NULL,
  `ResumeContent` VARCHAR(300) NULL DEFAULT NULL,
  `ResumeFileLink` VARCHAR(100) NULL DEFAULT NULL,
  PRIMARY KEY (`ResumeID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `CareerSiteDB`.`coverletter`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `coverletter` ;

CREATE TABLE IF NOT EXISTS `coverletter` (
  `CoverLetterID` INT(11) NOT NULL,
  `CoverLetterContent` VARCHAR(300) NULL DEFAULT NULL,
  `CoverLetterFileLink` VARCHAR(100) NULL DEFAULT NULL,
  PRIMARY KEY (`CoverLetterID`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `CareerSiteDB`.`application`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `application` ;

CREATE TABLE IF NOT EXISTS `application` (
  `ApplicationID` INT(11) NOT NULL,
  `ApplicationDate` DATE NOT NULL,
  `ApplicantID` INT(11) NOT NULL,
  `JobListingId` INT(11) NOT NULL,
  `ResumeID` INT(11) NOT NULL,
  `CoverLetterID` INT(11) NOT NULL,
  PRIMARY KEY (`ApplicationID`),
  INDEX `fk_Application_Applicant1_idx` (`ApplicantID` ASC),
  INDEX `fk_Application_JobListing1_idx` (`JobListingId` ASC),
  INDEX `fk_application_resume1_idx` (`ResumeID` ASC),
  INDEX `fk_application_coverletter1_idx` (`CoverLetterID` ASC),
  CONSTRAINT `fk_Application_Applicant1`
    FOREIGN KEY (`ApplicantID`)
    REFERENCES `applicant` (`ApplicantID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Application_JobListing1`
    FOREIGN KEY (`JobListingId`)
    REFERENCES `joblisting` (`JobListingId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_resume1`
    FOREIGN KEY (`ResumeID`)
    REFERENCES `resume` (`ResumeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_application_coverletter1`
    FOREIGN KEY (`CoverLetterID`)
    REFERENCES `coverletter` (`CoverLetterID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `CareerSiteDB`.`jobcart`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `jobcart` ;

CREATE TABLE IF NOT EXISTS `jobcart` (
  `JobCartItemID` INT(11) NOT NULL,
  `JobCartDateAdded` DATE NOT NULL,
  `ApplicantID` INT(11) NOT NULL,
  `JobListingId` INT(11) NOT NULL,
  PRIMARY KEY (`JobCartItemID`),
  INDEX `fk_JobCart_Applicant1_idx` (`ApplicantID` ASC),
  INDEX `fk_JobCart_JobListing1_idx` (`JobListingId` ASC),
  CONSTRAINT `fk_JobCart_Applicant1`
    FOREIGN KEY (`ApplicantID`)
    REFERENCES `applicant` (`ApplicantID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_JobCart_JobListing1`
    FOREIGN KEY (`JobListingId`)
    REFERENCES `joblisting` (`JobListingId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;





-- -----------------------------------------------------
-- Table `CareerSiteDB`.`savedapplications`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `savedapplications` ;

CREATE TABLE IF NOT EXISTS `savedapplications` (
  `EmployeeID` INT(11) NOT NULL,
  `ApplicationID` INT(11) NOT NULL,
  PRIMARY KEY (`EmployeeID`, `ApplicationID`),
  INDEX `fk_SavedApplications_Application1_idx` (`ApplicationID` ASC),
  CONSTRAINT `fk_SavedApplications_Application1`
    FOREIGN KEY (`ApplicationID`)
    REFERENCES `application` (`ApplicationID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_SavedApplications_Employee1`
    FOREIGN KEY (`EmployeeID`)
    REFERENCES `employee` (`EmployeeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `CareerSiteDB`.`workexperience`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `workexperience` ;

CREATE TABLE IF NOT EXISTS `workexperience` (
  `WorkExperienceID` INT(11) NOT NULL,
  `WorkExperienceCompanyName` VARCHAR(45) NOT NULL,
  `WorkExperienceStartDate` DATE NOT NULL,
  `WorkExperienceEndDate` DATE NOT NULL,
  `WorkExperienceDuties` VARCHAR(200) NOT NULL,
  `ApplicantID` INT(11) NOT NULL,
  PRIMARY KEY (`WorkExperienceID`),
  INDEX `fk_WorkExperience_Applicant1_idx` (`ApplicantID` ASC),
  CONSTRAINT `fk_WorkExperience_Applicant1`
    FOREIGN KEY (`ApplicantID`)
    REFERENCES `applicant` (`ApplicantID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;



###Initial data###

##Location addresses
INSERT INTO address VALUES
(1, "1300 Fremont Street N.", "San Francisco", "California", "94101"), 
(2, "2590 14th Ave SW", "Houston", "Texas", "77001"), 
(3, "7335 Cedar Court Dr. S", "Chicago", "Illanois", "60290");

##office locations
INSERT INTO location VALUES
(100, 1),
(101, 2),
(102, 3);

##Departments at locations
INSERT INTO department VALUES
(1000, "Accounting", 100), 
(1001, "IT", 100), 
(1002, "Sales", 100), 
(1003, "Accounting", 101), 
(1004, "IT", 101), 
(1005, "Sales", 101), 
(1006, "Accounting", 102), 
(1007, "IT", 102), 
(1008, "Sales", 102);

###Employee position info
INSERT INTO employeeposition VALUES
(10000, "Accounting Manager"), 
(10001, "IT Director"), 
(10002, "Sales Manager");

##employee home addresses
INSERT INTO address VALUES
(4, "2077 Mechanic Street", "San Francisco", "California", "94101"), 
(5, "2779 Church Road S", "San Francisco", "California", "94101"), 
(6, "8784 Main Street S.", "San Francisco", "California", "94101"), 
(7, "3482 6th Street W.", "Houston", "Texas", "77001"), 
(8, "710 James Street", "Houston", "Texas", "77001"), 
(9, "56 Brookside Dr. NW", "Houston", "Texas", "77001"), 
(10, "971 Canterbury Drive", "Chicago", "Illanois", "60290"), 
(11, "186 10th Street", "Chicago", "Illanois", "60290"), 
(12, "5100 King Street", "Chicago", "Illanois", "60290");

##Employee's information
INSERT INTO employee VALUES
(1000000, "Andrea", "M", "Porter", "555659900", 4, 10000, 1000),
(1000001, "Roman", "N", "Matthews", "555659901", 5, 10001, 1001),
(1000002, "Pedro", "B", "Francisco", "555659902", 6, 10002, 1002),
(1001003, "Malia", "B", "Jennings", "555659903", 7, 10000, 1003),
(1001004, "Mikel", "R", "Alger", "555659904", 8, 10001, 1004),
(1001005, "Tyrell", "T", "Collins", "555659905", 9, 10002, 1005),
(1002006, "Andrea", "R", "Thigpen", "555659906", 10, 10000, 1006),
(1002007, "Lena", "W", "Blair", "555659907", 11, 10001, 1007),
(1002008, "Margarita", "V", "Asul", "555659908", 12, 10002, 1008);

###Employees account info
INSERT INTO account VALUES
("PorterAM@Company.com", "ABCDEFG", NULL, 1000000, curdate()), 
("RNM@Company.com", "ABCDEFG", NULL, 1000001, curdate()), 
("PBFran@Company.com", "ABCDEFG", NULL, 1000002, curdate()), 
("MBJennings@Company.com", "ABCDEFG", NULL, 1001003, curdate()), 
("MRA@Company.com", "ABCDEFG", NULL, 1001004, curdate()),
("TTCollins@Company.com", "ABCDEFG", NULL, 1001005, curdate()),
("AnreaThigpen@Company.com", "ABCDEFG", NULL, 1002006, curdate()),
("LWBlai@Company.com", "ABCDEFG", NULL, 1002007, curdate()), 
("MVA@Company.com", "ABCDEFG", NULL, 1002008, curdate());

##Location addresses- Applicant
INSERT INTO address VALUES
(13, "1318 Summer Street", "San Francisco", "California", "94101");

#New applicant
INSERT INTO applicant VALUES
(9876543, "Jerry", "William", "Birch", "578880101", "5103239876", DATE("1980-11-05"), 13);

#Applicant account
INSERT INTO account VALUES
("JBWilliam@PersonalEmail.com", "ABCDEFG", 9876543, NULL, curdate());

#applicant work experience
INSERT INTO workexperience VALUES
(3000, "Generic Company", DATE("2005-01-01"), DATE("2014-01-01"), 
"Accounts payable, taxes, auditing.", 9876543);


##Get job details
DROP VIEW IF EXISTS JobSearchDetails;
CREATE VIEW JobSearchDetails AS
SELECT JobListingTitle 'Title', DepartmentName 'Department', 
CONCAT(AddressCity, ', ', AddressState) 'Location', JobListingId 'id',
JobListingDesc 'Description', 
concat(month(JobListingPostDate), '/', dayofmonth(JobListingPostDate), '/', year(JobListingPostDate)) 'Date', 
JobListingPostDate 'PostDate', JobListingPostTime 'PostTime',
JobListingDuties 'duties', JobListingReqExp 'required'
FROM joblisting NATURAL JOIN department NATURAL JOIN location NATURAL JOIN address;

#Create a list of searchable job listings
DROP PROCEDURE IF EXISTS SearchJobListings;
DELIMITER $ 
CREATE PROCEDURE SearchJobListings(kw VARCHAR(35)) 
BEGIN  
	IF kw IS NULL THEN  SELECT * FROM jobsearchdetails ORDER BY PostDate DESC, PostTime DESC;
    ELSE  
		SELECT * 
        FROM JobSearchDetails 
        WHERE Title LIKE kw
		OR Description LIKE kw
        OR duties LIKE kw
        OR required LIKE kw
        ORDER BY PostDate DESC, PostTime DESC;
	END IF;
END $ 
DELIMITER ;


#Get departments for search side bar
DROP VIEW IF EXISTS getDepartments;
CREATE VIEW getDepartments AS
SELECT DepartmentName 'Name', COUNT(JobListingId) 'Count'
FROM joblisting NATURAL JOIN department
GROUP BY DepartmentName;

#Get locations for search side bar
DROP VIEW IF EXISTS getLocations;
CREATE VIEW getLocations AS
SELECT AddressCity 'City', count(JobListingId) 'Count'
FROM joblisting NATURAL JOIN department NATURAL JOIN location NATURAL JOIN address
GROUP BY AddressCity
ORDER BY AddressCity;

##Job details for job page
DROP VIEW IF EXISTS getjobdetails;
CREATE VIEW getjobdetails AS
SELECT JobListingTitle 'title', JobListingId 'id', 
	CONCAT(month(JobListingPostDate), '/', day(JobListingPostDate), '/', year(JobListingPostDate)) 'postDate', 
	datediff(curdate(), JobListingPostDate) 'dayssince',
    datediff(JobListingExpDate, curdate()) 'daysleft',
    CONCAT(AddressCity, ', ', AddressState) 'location', DepartmentName 'department',
    JobListingDesc 'desc', JobListingDuties 'duties', JobListingReqExp 'required', 
    JobListingType 'type', EmployeeID 'empid'
FROM joblisting NATURAL JOIN department
NATURAL JOIN location NATURAL JOIN address;

##get the max job id
DROP FUNCTION IF EXISTS getLastJobID;
DELIMITER $ 
CREATE FUNCTION getLastJobID ()  
RETURNS INTEGER
BEGIN  
    DECLARE Max INT ;
	DECLARE Not_Found CONDITION FOR SQLSTATE '02000';  
    DECLARE Too_Many CONDITION FOR SQLSTATE '21000' ;  
    DECLARE EXIT HANDLER FOR Not_Found, Too_Many  RETURN NULL ;  
    SELECT MAX(JobListingId) INTO Max FROM joblisting;
    IF Max IS NULL THEN
		RETURN 0;
	ELSE
		RETURN (SELECT MAX(JobListingId) FROM joblisting); 
    END IF;
END $ 
DELIMITER ; 

##generate departments for options
DROP VIEW IF EXISTS getDepartmentOptions;
CREATE VIEW getDepartmentOptions AS
SELECT DepartmentID 'id', DepartmentName 'name', AddressCity 'city'
FROM department NATURAL JOIN location
NATURAL JOIN address;


##Get list of job postings
DROP VIEW IF EXISTS getempjoblist;
CREATE VIEW getempjoblist AS
SELECT employeeid 'empid', id 'jobid', title 'title', 
	department 'department', location 'location', 
    concat(month(postdate), '/', dayofmonth(postdate), '/', year(postdate)) 'dateadded'
FROM joblisting, JobSearchDetails
WHERE id = JobListingId;


##get last cart id number
DROP FUNCTION IF EXISTS getLastJobCartID;
DELIMITER $ 
CREATE FUNCTION getLastJobCartID ()  
RETURNS INTEGER
BEGIN  
	DECLARE Max INT ;
    
	DECLARE Not_Found CONDITION FOR SQLSTATE '02000';  
    DECLARE Too_Many CONDITION FOR SQLSTATE '21000' ;  
    DECLARE EXIT HANDLER FOR Not_Found, Too_Many  RETURN NULL ;  
    SELECT MAX(JobCartItemID) INTO Max FROM jobcart;
    IF Max IS NULL THEN
		RETURN 0;
	ELSE
		RETURN (SELECT MAX(JobCartItemID) FROM jobcart); 
    END IF;
END $ 
DELIMITER ; 

#Get the cart contents
DROP VIEW IF EXISTS getcart;
CREATE VIEW getcart AS
SELECT applicantid 'appid', id 'jobid', title 'title', 
	department 'department', location 'location', 
    concat(month(jobcartdateadded), '/', dayofmonth(jobcartdateadded), '/', year(jobcartdateadded)) 'dateadded'
FROM jobcart, JobSearchDetails
WHERE id = JobListingId
AND id IN (SELECT JobListingId 'id'
			FROM jobcart
			WHERE JobCartItemID NOT IN (SELECT JobCartItemID
					FROM jobcart NATURAL JOIN application));


#Get info for app autofill
DROP VIEW IF EXISTS getappbasicinfo;
CREATE VIEW getappbasicinfo AS
SELECT ApplicantID 'appid', ApplicantFirstName 'fname', ApplicantMiddleName 'mname', ApplicantLastName 'lname', 
	ApplicantSSN 'ssn', ApplicantBirthDate 'bdate', AddressStreet 'street', AddressCity 'city', AddressState 'state', AddressZip 'zip',
    WorkExperienceID 'weid', WorkExperienceCompanyName 'company', WorkExperienceStartDate 'start',
    WorkExperienceEndDate 'end', WorkExperienceDuties 'duties'
FROM applicant NATURAL JOIN address
NATURAL JOIN workexperience;

#get the mas app id
DROP FUNCTION IF EXISTS getLastAppID;
DELIMITER $ 
CREATE FUNCTION getLastAppID ()  
RETURNS INTEGER
BEGIN  
	DECLARE Max INT ;
	DECLARE Not_Found CONDITION FOR SQLSTATE '02000';  
    DECLARE Too_Many CONDITION FOR SQLSTATE '21000' ;  
    DECLARE EXIT HANDLER FOR Not_Found, Too_Many  RETURN NULL ;  
    SELECT MAX(ApplicationID) INTO Max FROM application;
    IF Max IS NULL THEN
		RETURN 0;
	ELSE
		RETURN (SELECT MAX(ApplicationID) FROM application); 
    END IF;
END $ 
DELIMITER ; 

#get the mas resume id
DROP FUNCTION IF EXISTS getLastResumeID;
DELIMITER $ 
CREATE FUNCTION getLastResumeID ()  
RETURNS INTEGER
BEGIN  
	DECLARE Max INT ;
	DECLARE Not_Found CONDITION FOR SQLSTATE '02000';  
    DECLARE Too_Many CONDITION FOR SQLSTATE '21000' ;  
    DECLARE EXIT HANDLER FOR Not_Found, Too_Many  RETURN NULL ;  
    SELECT MAX(ResumeID) INTO Max FROM `resume`;
    IF Max IS NULL THEN
		RETURN 0;
	ELSE
		RETURN (SELECT MAX(ResumeID) FROM `resume`); 
    END IF;
END $ 
DELIMITER ; 

#get the max coverletter id
DROP FUNCTION IF EXISTS getLastCoverLetterID;
DELIMITER $ 
CREATE FUNCTION getLastCoverLetterID ()  
RETURNS INTEGER
BEGIN  
	DECLARE Max INT ;
	DECLARE Not_Found CONDITION FOR SQLSTATE '02000';  
    DECLARE Too_Many CONDITION FOR SQLSTATE '21000' ;  
    DECLARE EXIT HANDLER FOR Not_Found, Too_Many  RETURN NULL ;  
    SELECT MAX(CoverLetterID) INTO Max FROM coverletter;
    IF Max IS NULL THEN
		RETURN 0;
	ELSE
		RETURN (SELECT MAX(CoverLetterID) FROM coverletter); 
    END IF;
END $ 
DELIMITER ; 

#get a list of applications
DROP VIEW IF EXISTS getapps;
CREATE VIEW getapps AS
SELECT ApplicantID 'appid', JobListingId 'jobid', title, department, location, postDate,
ApplicationDate 'appdate'
FROM application, getjobdetails
WHERE JobListingId = id;



#######Job listing data##############

##Insert Job listing 1### 
INSERT INTO joblisting VALUES
(10000000, curdate(), DATE("2015-09-29"), curtime(), "Accounting Assistant", 
"This position is responsible for preparing and managing accounting documents and processes within established procedures and applicable state and federal regulations.", 
"<p>Knowledge, Skills, Abilities:</p>
<ul>
	<li>Knowledge of processing software tools 
	including but not limited to Word, Excel, Outlook and the internet.</li>
	<li>Knowledge of general office procedures 
	and applicable policies, procedures and regulations.</li>
	<li>Skill to operate standard office 
	equipment such as computers, telephones, copiers, etc.</li>
	<li>Ability to identify and resolve 
	problems in a timely manner and look for ways to improve and promote 
	quality.</li>
	<li>Ability to gather, analyze and enter 
	information accurately and thoroughly.</li>
	<li>Ability to carry out multiple tasks, 
	meet deadlines and maintain organization in a changing environment.</li>
	<li>Ability to be a reliable, confident 
	team player and maintain a flexible attitude and approach towards 
	assignments.</li>
</ul>",
"<p>include the following. Other duties may be assigned.</p>
<ul>
	<li>Verify fees and costs in MDS are accurate by adjusting or entering amounts as needed and provide to lender when requested.</li>
	<li>Send invoices to customers within established procedures and guidelines.</li>
	<li>Communicate information to co-workers, lenders, servicers, vendors, etc, as needed.</li>
</ul>",
"Full-time, Salary", 1000, 1000000);

##Insert Job listing 2### 
INSERT INTO joblisting VALUES
(10000001, curdate(), DATE("2015-09-29"), curtime(), "Lead Software Engineer", 
"Our rapidly growing client, located in San Francisco, is seeking a talented engineer to join their team to design, implement and host an innovative and successful suite of web-based knowledge base tools. This Lead developer will be responsible for SQL server design and tuning, as well as development of web services. Experience in SQL server is a must, as is a solid understanding of basic web technologies including CSS, JavaScript, jquery and REST web services will serve candidates well.", 
"<ul>
<li>At least 8 years’ experience with development</li>
<li>At least 2 years’ experience leading a team</li>
<li>Server Development including: C# (5.0, 6.0), Lambda Expressions, Multi-threaded Code (TPL, PLINQ, Threads, etc.), Unit Testing</li>
<li>SQL Server: experience with Database Design, T-SQL, Stored Procedures, Optimization and Tuning.</li>
<li>Experience with system architecture, troubleshooting performance and issues, and performance testing</li>
<li>Web application Development including: ASP.Net MVC, HTML, JavaScript (libraries like: jQuery, Angular, Knockout, React), Bootstrap, and Unit Testing.</li>
</ul>",
"<ul>
<li>Produce elegant, well-designed knowledge base application</li>
<li>Participate in agile/scrum discipline</li>
<li>Work with world-class automation team and deliver excellent test coverage to support continuous integration/delivery</li>
</ul>",
"Full-time, Salary", 1001, 1000001);

##Insert Job listing 3### 
INSERT INTO joblisting VALUES
(10000002, curdate(), DATE("2015-10-15"), curtime(), "Marketing Specialist", 
"This new role will be responsible for proactively and successfully engaging with end users. Successful candidates will have excellent written and verbal communication skills, with the ability to learn technology and speak persuasively and knowledgably with business decision makers!", 
"<ul><li>Bachelor's Degree and a minimum of 2 years of professional experience in sales, PR or marketing.</li><li>IT industry experience a plus, but not required.</li><li>Ability to communicate Synology products, services and brand accurately to customers and other audiences in a professional manner.</li><li>Strong computer skills including MS Office and Salesforce; Creative Suite a plus.</li><li>Self-motivated and able to work effectively with limited supervision.</li><li>Ability to travel locally and nationally.</li></ul>",
"<ul>
<li>Establish and maintain a high-level understanding of the application of Synology products and be able to create a business case for end users</li>
<li>Represent Synology at public, social, and business gatherings</li>
<li>Assist the Marketing team in developing and implementing various marketing strategies, objectives, targets and plans</li>
<li>Assist with social media activity, including writing and maintaining content and providing updates to company website, social media sites, and blogs</li>
<li>Coordinate a wide range of marketing communications - email broadcasts, marketing trade shows and events, public relations, etc.</li>
</ul>",
"Full-time, Salary", 1002, 1000002);


##Insert Job listing 4### 
INSERT INTO joblisting VALUES
(10000003, curdate(), DATE("2015-10-15"), curtime(), "Staff Accountant", 
"Accounting is performed at the corporate office for most all locations. This includes, accounts payable, payroll and general ledger reconciliation work, revenue and GAAP reconciliation. We are looking for a high-energy, forward-thinking person who has experience in a hands-on situation and is well versed in GAAP accounting.", 
"<ul><li>Accounting degree; minimum of 3 years of experience, CPA preferred</li><li>Combination of public accounting and private company experience preferred</li><li>Healthcare and or multi location industry focus preferred</li><li>Self-starter; desire to engage actively and partner with Accounting Manager / Controller to create and enhance accounting process and controls of a growing organization</li><li>Solid and demonstrated knowledge of GAAP</li><li>Excellent Microsoft Office skills, particularly Excel</li><li>Prior experience with Great Plains strongly preferred</li><li>Familiarity with ADP and GL interface</li></ul>",
"<ul><li>Financial accounting, some transactional work, intercompany allocations and reconciliations, payroll and consolidations</li><li>Work with field personnel for recording entries / accruals.</li><li>Revenue review and reconciliation</li><li>Expense variance analysis</li><li>Balance sheet reconciliations – looking for what is there and also following through to make sure items get cleared out</li><li>Assist in annual independent financial audit</li><li>Assistance with accounting in service locations</li><li>Assist/backup for accounts payable and fixed asset accounting</li><li>Ensure the accurate and timely completion of all federal, state and local taxes/filings</li><li>Provide support to the Controller in regard to acquisition activities</li></ul>",
"Full-time, Salary", 1003, 1001003);

##Insert Job listing 5### 
INSERT INTO joblisting VALUES
(10000004, curdate(), DATE("2015-10-15"), curtime(), "Software Developer", 
"Customer Service Technology is looking for a software development engineer to work on our Customer Relationship Management platform",
"- A BS in Computer Science, or a related field.<br>-3+ years experience developing in Java, C++ or other object oriented languages.<br>- Strong background in computer science basics (data structures, algorithms, etc).<br>- Sharp analytical abilities, design skills and a track record of delivery.<br>- Experience with object-oriented design and fluency in Java and/or C++ or other object-oriented languages<br>",
"Work in our platform will provide the opportunity to contribute to the complete vertical stack of an SOA based system, which is horizontally connected to most systems in the larger Amazon ecosystem. Areas include business intelligence, web service implementation, database design, web based applications, UI design and usability and accessibility optimization.",
"Full-time, Salary", 1004, 1001004);

##Insert Job listing 6### 
INSERT INTO joblisting VALUES
(10000005, curdate(), DATE("2015-10-15"), curtime(), "Sales Representative", 
"We're looking for the best and brightest to take our Sales department to the next level. If you have passion and expertise in business development, account management, or business acumen, Uline is the company for you. Click here to learn more.",
"<ul><li>High School Diploma.</li><li>1-3 years of sales experience.</li><li>Valid drivers license with clean driving record.</li><li>A reliable vehicle.</li><li>Basic knowledge of cannabis growing.</li><li>Ability to communicate effectively in person, over the phone, or over the Internet.</li><li>Be able to respond back to calls, texts, and emails in timely fashion.</li><li>Have good skills in relationship building.</li><li>Basic computer skills (you must know how to effectively navigate the internet, maintain a business email account, and learn how to use CRM software)</li><li>Expect to travel frequently, with about 80% of travel within Washington State.</li></ul>", 
"<ul><li>Through visits, calls, texts, emails – communicates directly with growers and explain what separates Growth Science from other brands and how they can directly benefit from using or switching to us.</li><li>Through visits, calls, texts, emails – communicates directly with hydroponic retailers to; have them carry our brand, help train their sales people on how the products work, increase our sales, and improve advertising strategies to help promote the brand in their store.</li></ul>", 
"Full-time, Salary", 1005, 1001005);

##Insert Job listing 7### 
INSERT INTO joblisting VALUES
(10000006, curdate(), DATE("2015-11-09"), curtime(), "Accountant", 
"Responsible for analyzing and preparing Journal Entries, General Ledger and analyzing daily costing transactions. Responsible for preparing internal reports regarding cost variances (labor, purchase prices, bill of materials, freight, etc.) and budget variances; actively participate in improvement of procedures and processes;  reviews excess and obsolete inventory and  assist with the monthly close process and annual budget process.", 
"<ul>	<li>Bachelor's degree with a major in accounting, finance, business administration or closely-related field</li>	<li>Three (3) years of professional accounting experience</li>	<li>Note:&nbsp; An equivalent combination of related training and experience may be considered</li>	<li>Desirable: Previous supervisory experience</li>	<li>Desirable: Governmental accounting experience</li></ul>",
"<ul>	<li>Plans, schedules, coordinates, trains, and evaluates the work of the Cashiering functional division</li>	<li>Coordinates and monitors the activities and operations related to collection, accounting and auditing of revenue collection systems; recommends and implements policies, procedures and practices as they relate to cash handling</li>	<li>Reports and assists in the resolution of problems with revenue collection hardware and software systems, performs test plans and assists with implementation of system upgrades, inclusive of development of web payment capabilities; acts as assistant administrator for City's cash receipt system and the respective credit card gateways</li>	<li>Prepares, reviews and posts journal entries; assists in the preparation and analytical review of financial statements inclusive of comprehensive annual financial reports (CAFR), general ledger reconciliations, and audit schedules of assigned division</li></ul>",
"Full-time, Salary", 1006, 1002006);


##Insert Job listing 5### 
INSERT INTO joblisting VALUES
(10000007, curdate(), DATE("2015-10-15"), curtime(), "Database Administrator", 
"This position is for a highly motivated individual to join a specialized team to manage and maintain our production applications and infrastructure. This would include, but not be limited to, rolling out new/updated applications, and monitoring applications in the production environment. The ideal candidate will also be responsible for implementing new strategies to support monitoring and maintenance of current production environment.",
"<ul>
<li>College degree or equivalent experience.  </li>
<li>Typically up to five (5) years’ experience in an applicable technical field.</li>
<li>Experience with manual testing, creating test cases, and automated test scripts.</li>
<li>Experience with SoapUi for testing web services a plus.</li>
<li>Experience with Waterfall and Agile methodologies.</li>
<li>Experience with automated testing tools where Selenium experience is a plus.</li>
<li>Experience with Java scripting language. </li>
<li>Knowledge of Windows platform, client/server and web-based applications.</li>
<li>Ability to work in a dynamic fast paced environment with multiple priorities and projects.</li>
</ul>",
"<ul>
Note: The duties listed below are intended only as illustrations of the various types of work that may be performed. The omission of specific statements of duties does not exclude them from the position if the work is similar.
<li>Design and document database architecture.</li>
<li>Build database schemas, tables, views, and stored procedures.</li>
<li>Analyze and maintain performance requirements.</li>
<li>Install, configure, and update MySQL on servers.</li>
<li>Set-up and maintain replication.</li>
<li>Monitor database systems.</li>
<li>Provide 24/7 support for critical applications.</li>
<li>Evaluate and recommend new database technologies.</li>
</ul>",
"Full-time, Salary", 1007, 1002007);

##Insert Job listing 9### 
INSERT INTO joblisting VALUES
(10000008, curdate(), DATE("2015-10-15"), curtime(), "Sales and Marketing Assistant", 
"Through innovation and technology, we provide information management systems and services that track, monitor, verify, and sustain data that personnel use in the operation of oil, gas, and chemical plants and facilities. We specialize in process safety management, software implementation, and custom software development. We not only implement and maintain information systems and processes, but we build the foundation of these systems to ensure the data utilized is accurate.",
"<ul><li>Four year degree from an accredited college or university</li><li>2-3 years’ experience in a professional/business environment</li><li>Experienced in oil and gas industry, preferred</li><li>Proficiency in Microsoft Word and Excel</li><li>Strong written and oral communication skills required</li><li>Excellent organization</li><li>The ability to prioritize high-importance items</li></ul>",
"<ul><li>Generate client proposals</li><li>Communicate with project leads to develop proposals</li><li>Track company proposals, estimates, and purchase orders</li><li>Manage files and records in department SharePoint site</li><li>Generate weekly/monthly status reports</li><li>Provide professional customer interaction</li><li>Assist with conference and tradeshow preparations</li><li>Ensure deadlines are met</li><li>Understand and comply with all Provenance and client safety procedures that govern the work being performed</li></ul>",
"Full-time, Salary", 1008, 1002008);

##Insert Job listing 10### 
INSERT INTO joblisting VALUES
(10000009, curdate(), DATE("2015-10-15"), curtime(), "QA Engineer", 
"We are currently seeking a new QA Engineer to be responsible for evaluating and testing of software applications for usability and functionality. The right candidate will be well-rounded with solid analytical skills, an enthusiasm for taking ownership of features, a strong commitment to quality, and the ability to work closely and communicate effectively with development and other teams.",
"<ul>
	<li>Bachelor's degree in any discipline&nbsp;</li>
	<li>2+ years’ experience in testing of web applications</li>
	<li>Strong attention to detail is a must</li>
	<li>Familiar with Agile/Scrum methodologies a plus</li>
	<li>Software Integrations experience a big plus</li>
	<li>Web Services a plus</li>
	<li>Must have passion for new technologies</li>
	<li>Position requires good analytical skills and a strong attention to detail</li>
	<li>Ability to write SQL queries and scripts a plus</li>
	<li>Must have strong organizational, multi-tasking, team-work and communication skills</li>
	<li>Must be flexible with a customer focused attitude and an ability to perform under pressure</li>
	<li>Must work well within a team environment</li>
	<li>Must be able to communicate effectively at all organizational levels&nbsp;</li>
</ul>",
"<ul>
	<li>Design, develop, and implement software quality assurance procedures that will support the testing and delivery of quality software applications</li>
	<li>Perform testing on software integrations</li>
	<li>Perform inline QA</li>
	<li>Create and maintain test plans &amp; cases</li>
	<li>Participate in problem-solving processes for resolving end-user support issues, test feasibility of changes, and assess workflow impact, usability and style</li>
	<li>Active participant of a Scrum team</li>
	<li>Find and enter defects into defect tracking system</li>
	<li>Works with Project Managers and Developers to discuss project schedules and resource allocation for any given project</li>
	<li>A commitment to quality and a thorough approach to the work</li>
</ul>",
"Full-time, Salary", 1004, 1001004);



